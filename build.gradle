// First, apply the publishing plugin
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
      mavenCentral()
  }
  dependencies {
    classpath "com.gradle.publish:plugin-publish-plugin:0.9.1"
    classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:2.2.+'
  }
}

plugins {
  id 'groovy'
  id 'idea'
  alias(libs.plugins.axion.release)
  alias(libs.plugins.plugin.publish)
  id 'java-gradle-plugin'
  alias(libs.plugins.animalsniffer)
}

apply plugin: 'com.github.hierynomus.license'

defaultTasks 'build'

group = 'com.hierynomus.gradle.plugins'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

repositories {
    maven { url 'https://jitpack.io' }
    mavenCentral()
    google()
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}


scmVersion {
    tag {
        prefix = 'v'
        versionSeparator = ''
    }
    hooks {
        pre 'fileUpdate', [file: 'README.adoc', pattern: { v, c -> /:license_plugin_version .*/}, replacement: { v, c -> ":license_plugin_version: $v" }]
        pre 'commit'
    }
}

project.version = scmVersion.version


configurations.implementation.transitive = false

sourceSets.create("integrationTest")

dependencies {
  signature 'org.codehaus.mojo.signature:java17:1.0@signature'

    implementation libs.plexus.utils
    implementation libs.xmltool
    implementation(libs.license.maven.plugin) {
        exclude group: 'org.apache.maven', module: 'maven-plugin-api'
        exclude group: 'org.apache.maven', module: 'maven-project'
    }
    implementation gradleApi()

    testImplementation libs.android.gradle.plugin

    integrationTestImplementation(project)
    integrationTestImplementation gradleTestKit()
    integrationTestImplementation platform(libs.spock.bom)
    integrationTestImplementation libs.nebula.test
    integrationTestImplementation libs.spock.core
    integrationTestImplementation libs.spock.junit4
    integrationTestImplementation libs.junit
    integrationTestImplementation libs.guava

    testImplementation gradleTestKit()
    testImplementation libs.nebula.test
    testImplementation platform(libs.spock.bom)
    testImplementation libs.spock.core
    testImplementation libs.spock.junit4
    testImplementation libs.junit
    testImplementation libs.guava
}

def integrationTestTask = tasks.register("integrationTest", Test) {
    description = 'Runs the integration tests.'
    group = "verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter(tasks.named('test'))
    useJUnitPlatform()
}

tasks.named('check') {
    it.dependsOn(integrationTestTask)
}


// This disables the pedantic doclint feature of JDK8
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

license {
    ignoreFailures true
}

tasks.withType(Test).all { t ->
  t.afterSuite { descriptor, result ->
    def indicator = "\u001B[32m✓\u001b[0m"
    if (result.failedTestCount > 0) {
      indicator = "\u001B[31m✘\u001b[0m"
    }
    logger.lifecycle("$indicator Test ${descriptor.name}; Executed: ${result.testCount}/\u001B[32m${result.successfulTestCount}\u001B[0m/\u001B[31m${result.failedTestCount}\u001B[0m")
  }
}

def pomConfig = {
    name project.name
    description project.project_description
    url project.project_url
    inceptionYear '2011'

    scm { url project.project_scm }

    licenses {
        license([:]) {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'hierynomus'
            name 'Jeroen van Erp'
            url 'http://www.javadude.nl/'
            email 'jeroen@javadude.nl'
            roles { role 'Developer' }
        }
    }

    contributors {
        contributor {
            name 'Tim Harsch'
            email 'harschware@yahoo.com'
        }
        contributor {
            name 'Justin Ryan'
            email 'jryan@netflix.com'
        }
    }
}

gradlePlugin {
    plugins {
        licensePlugin {
            id = "com.github.hierynomus.license"
            implementationClass = "nl.javadude.gradle.plugins.license.LicensePlugin"
        }

        licenseBasePlugin {
            id = "com.github.hierynomus.license-base"
            implementationClass = "com.hierynomus.gradle.license.LicenseBasePlugin"
        }

        licenseReportPlugin {
            id = "com.github.hierynomus.license-report"
            implementationClass = "com.hierynomus.gradle.license.LicenseReportingPlugin"
        }
    }
}

pluginBundle {
    website = "https://github.com/hierynomus/license-gradle-plugin"
    vcsUrl = "https://github.com/hierynomus/license-gradle-plugin.git"
    tags = ["gradle", "plugin", "license"]
    plugins {
        licensePlugin {
            displayName = "License plugin for Gradle"
            description = "Applies a header to files, typically a license"
        }
        licenseBasePlugin {
            displayName = "Base License plugin for Gradle"
            description = "Base plugin to apply a header to files, typically a license"
        }

        licenseReportPlugin {
            displayName = "License Report plugin for Gradle"
            description = "Reports over licenses"
            tags = [ "gradle", "plugin", "license", "report" ]
        }
    }
}

if (!System.env.containsKey("JENKINS_URL")) {
    def javaVersion = System.properties['java.version']
    if (JavaVersion.toVersion(javaVersion) != project.targetCompatibility) {
//        throw new GradleException("Expected Java version ${project.targetCompatibility} but running with $javaVersion")
    }
}
